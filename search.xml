<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript - 作用域(Scope)與作用域鏈(Scope Chain)</title>
    <url>/JavaScript-%E4%BD%9C%E7%94%A8%E5%9F%9F-Scope-%E8%88%87%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%8F%88-Scope-Chain/</url>
    <content><![CDATA[<p>作用域定義 JavaScript 中變數的影響範圍。作用域鏈為作用域對父級作用域的引用形成的關聯。</p>
<span id="more"></span>

<h1 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域(Scope)"></a>作用域(Scope)</h1><p>程式碼中定義變數時，這些變數在程式中的可見性(visibility)和可存取性(accessibility)的範圍。</p>
<p><a href="https://www.w3schools.com/js/js_scope.asp">w3schools</a> 上描述 :</p>
<blockquote>
<p>Scope determines the accessibility (visibility) of variables.</p>
</blockquote>
<p>JavaScript 有下列作用域 :</p>
<ul>
<li>全域作用域(Global Scope)</li>
<li>函式作用域(Function Scope)</li>
<li>區塊作用域(Block Scope)</li>
</ul>
<h2 id="全域作用域-Global-Scope"><a href="#全域作用域-Global-Scope" class="headerlink" title="全域作用域(Global Scope)"></a>全域作用域(Global Scope)</h2><p>在函式(function)及區塊(block)外宣告的變數，可以在任何地方被存取。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;ABen&quot;</span> <span class="comment">// Global scope</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">2</span> <span class="comment">// Global scope</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> color = <span class="string">&quot;brindle&quot;</span> <span class="comment">// Global scope</span></span><br></pre></td></tr></table></figure>

<h2 id="函式作用域-Function-Scope"><a href="#函式作用域-Function-Scope" class="headerlink" title="函式作用域(Function Scope)"></a>函式作用域(Function Scope)</h2><p>每一個函式都會建立一個函式作用域。在函式內部宣告的變數，只能在函式中被存取。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&quot;ABen&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// ABen</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">func</span>()</span><br></pre></td></tr></table></figure>

<p>以 <code>var</code> 宣告的變數具有函式作用域 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">&quot;function scope&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(scope) <span class="comment">// function scope</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">func</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(scope) <span class="comment">// ReferenceError: scope is not defined</span></span><br></pre></td></tr></table></figure>

<p>在<strong>嚴格模式</strong>下，函式為區塊作用域 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;block scope&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">func</span>() <span class="comment">// block scope</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">func</span>() <span class="comment">// ReferenceError: func is not defined</span></span><br></pre></td></tr></table></figure>

<h2 id="區塊作用域-Block-Scope"><a href="#區塊作用域-Block-Scope" class="headerlink" title="區塊作用域(Block Scope)"></a>區塊作用域(Block Scope)</h2><p>因 ES6 的 <code>let</code> 與 <code>const</code> 變數宣告，<code>&#123;&#125;</code>內部宣告的變數於外部無法存取。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// Uncaught ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure>

<h1 id="作用域鏈-Scope-Chain"><a href="#作用域鏈-Scope-Chain" class="headerlink" title="作用域鏈(Scope Chain)"></a>作用域鏈(Scope Chain)</h1><p>作用域擁有對父級作用域變數的引用，因此多個嵌套的作用域即形成作用域鏈。</p>
<p>變數查找(Variable Lookup) : 當一個作用域中需要使用某個變數，但在當前作用域下無法存取時，會在作用域鏈中查找，父層作用域是否存在該變數，若最終在全域沒找到則拋出錯誤。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;ABen&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">first</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> age = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">second</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> color = <span class="string">&quot;brindle&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span> is a <span class="subst">$&#123;age&#125;</span>-year-old <span class="subst">$&#123;color&#125;</span> dog.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">second</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">first</span>() <span class="comment">// ABen is a 2-year-old brindle dog.</span></span><br></pre></td></tr></table></figure>

<p>程式碼中在 second 函式存取的 <code>name</code> 與 <code>age</code> 並非是在自身函式內部宣告的變數，而是通過作用域鏈向外部作用域查找所取得的變數。</p>
<h1 id="語彙環境-Lexical-Environment"><a href="#語彙環境-Lexical-Environment" class="headerlink" title="語彙環境(Lexical Environment)"></a>語彙環境(Lexical Environment)</h1><p>是 JS 引擎內部的(抽象)結構，儲存變數和函式名稱與對應的物件或原始值之間的映射關係。每個語彙環境會保有對父級語彙環境的引用。</p>
<p>當定義一個變數或函式時，它們會被儲存在當前的語彙環境中。當在程式碼中使用這些變數時，JS 引擎會通過查找語彙環境鏈來找到對應的值。</p>
<p>語彙環境由兩部分組成 :</p>
<ol>
<li>環境紀錄(Environmental Record) : 保存當前語彙環境的變數資料。</li>
<li>外部語彙環境的引用(a reference to outer lexical environment) : 保存對父級語彙環境的引用。</li>
</ol>
<h1 id="語彙範疇-Lexical-Scope"><a href="#語彙範疇-Lexical-Scope" class="headerlink" title="語彙範疇(Lexical Scope)"></a>語彙範疇(Lexical Scope)</h1><p>程式執行時 JavaScript 是如何將值對應到正確的變數呢 ?</p>
<p>程式語言一般有兩種類型 :</p>
<ol>
<li>靜態範疇(Static Scoping) :<ul>
<li>注重變數在程式碼中聲明的位置。當前位置找不到變數則向父級查找。</li>
<li>C、Java、JavaScript、Python 等語言採用靜態範疇。</li>
</ul>
</li>
<li>動態範疇(Dynamic Scoping) :<ul>
<li>注重函式呼叫的位置。</li>
<li>Perl 採用動態範疇。</li>
</ul>
</li>
</ol>
<p>程式範例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;ABen&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">boo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&quot;Black&quot;</span></span><br><span class="line">  <span class="title function_">foo</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">boo</span>() <span class="comment">// ABen</span></span><br></pre></td></tr></table></figure>

<p>上面的程式在全域作用域及函式作用域中分別各宣告一個 <code>name</code> 變數，在 boo 函式執行時調用了 foo 函式，因為 JavaScript 採用靜態範疇，所以當在 foo 中找不到 <code>name</code> 時，不會因為是在 boo 中被呼叫就使用 boo 中宣告的 <code>name</code>，而是向當前位置的父級範疇查找，最後就在全域中取得變數。</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
<li><a href="https://medium.com/@anilakgunes/scope-lexical-environment-and-scope-chain-in-javascript-559aadb7dca8">Scope, Lexical Environment and Scope Chain in JavaScript</a></li>
<li><a href="https://medium.com/itsems-frontend/javascript-scope-and-scope-chain-ca17a1068c96">[JavaScript] Javascript 的作用域 (Scope) 與範圍鏈 (Scope Chain)：往外找</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - 執行環境(Execution Context)與執行堆疊(Call Stack)</title>
    <url>/JavaScript-%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-Execution-Context-%E8%88%87%E5%91%BC%E5%8F%AB%E5%A0%86%E7%96%8A-Call-Stack/</url>
    <content><![CDATA[<p>每呼叫一個函式就會產生一個 Execution Context，並且放入 Call Stack 中等待執行，JavaScript 就是藉由 Call<br>Stack 來追蹤程式的運行。</p>
<span id="more"></span>

<h1 id="執行環境-Execution-Context"><a href="#執行環境-Execution-Context" class="headerlink" title="執行環境(Execution Context)"></a>執行環境(Execution Context)</h1><p>全域與函式程式碼的 JS 內部構造。</p>
<p>JavaScript 的兩種執行環境 :</p>
<ul>
<li>全域執行環境(Global Execution Context)</li>
<li>函式執行環境(Function Execution Context)</li>
</ul>
<p>執行環境包含兩個階段 : 創建階段(creation phase)、執行階段(execution phase)。</p>
<h2 id="全域執行環境-Global-Execution-Context"><a href="#全域執行環境-Global-Execution-Context" class="headerlink" title="全域執行環境(Global Execution Context)"></a>全域執行環境(Global Execution Context)</h2><p>一開始執行 JS 程式碼時所創建的執行環境。</p>
<p>創建階段(creation phase) :</p>
<ol>
<li>創建 global object。(瀏覽器的 window object 或 Node.js 的 global object。)</li>
<li>建立 scope。</li>
<li>創建 <code>this</code>，並綁定至 global object。</li>
<li>將 variables、class 和 function 分配至記憶體。(hoisting)</li>
</ol>
<p>執行階段(execution phase) :</p>
<ol>
<li>逐行執行程式碼。</li>
<li>遇到遞迴時，使用 Call Stack 排定執行順序。</li>
</ol>
<h2 id="函式執行環境-Function-Execution-Context"><a href="#函式執行環境-Function-Execution-Context" class="headerlink" title="函式執行環境(Function Execution Context)"></a>函式執行環境(Function Execution Context)</h2><p>每次調用函式即創建的執行環境。</p>
<p>創建階段(creation phase) :</p>
<ol>
<li>創建 arguments object。</li>
<li>建立 scope。</li>
<li>創建 <code>this</code>。</li>
<li>將 variables、class 和 function 分配至記憶體。(hoisting)</li>
</ol>
<p>執行階段(execution phase) :</p>
<ol>
<li>逐行執行程式碼。</li>
<li>遇到遞迴時，使用 Call Stack 排定執行順序。</li>
</ol>
<h1 id="呼叫堆疊-Call-Stack"><a href="#呼叫堆疊-Call-Stack" class="headerlink" title="呼叫堆疊(Call Stack)"></a>呼叫堆疊(Call Stack)</h1><p>是 JS 引擎追蹤本身在調用多個函式的程式碼中所在位置的機制。可以幫助我們知道 JS 引擎當前正在運行什麼函式，以及該從函式中調用那些函式。</p>
<p>JavaScript 為單執行緒(single thread)的程式語言，指一次只能執行一個任務，而其他任務會依序添加到堆疊中，等待被執行。</p>
<blockquote>
<p>堆疊(Stack) : 具有後進先出(LIFO, Last In First Out)特性的資料結構。</p>
</blockquote>
<p>執行以下程式碼 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func1 開始執行&quot;</span>)</span><br><span class="line">  <span class="title function_">func2</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func1 結束執行&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func2 開始執行&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func2 結束執行&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">func1</span>()</span><br><span class="line"><span class="comment">// func1 開始執行</span></span><br><span class="line"><span class="comment">// func2 開始執行</span></span><br><span class="line"><span class="comment">// func2 結束執行</span></span><br><span class="line"><span class="comment">// func1 結束執行</span></span><br></pre></td></tr></table></figure>

<p>Call Stack 看起來會像 :<br><img src="/JavaScript-%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-Execution-Context-%E8%88%87%E5%91%BC%E5%8F%AB%E5%A0%86%E7%96%8A-Call-Stack/call_stack.webp" alt="Call Stack"></p>
<p>執行流程 :</p>
<ol>
<li>首先處於全域執行環境(Global Execution Context)的程式會先進入 stack。</li>
<li>func1 被呼叫，放入 stack 的最上方，並執行函式。執行 func1 過程中呼叫 func2，停止執行 func1。</li>
<li>func2 被呼叫，將其放入 stack 的最上方，並執行函式。執行結束後將函式從 stack 中移除。</li>
<li>從 func1 停止位置繼續執行程式，完成後從 stack 中移除。</li>
<li>程式執行完畢，便將全域執行環境從 stack 中移除。</li>
</ol>
<blockquote>
<p>若 Call Stack 堆疊過高，超出記憶體所分配的空間，會導致 <strong>stack overflow</strong> 的問題。</p>
</blockquote>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/wilson-full-stack-web-development/">2023 網頁全端開發</a></li>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - 提升(Hoisting)與暫時死區(TDZ)</title>
    <url>/JavaScript-%E6%8F%90%E5%8D%87-Hoisting-%E8%88%87%E6%9A%AB%E6%99%82%E6%AD%BB%E5%8D%80-TDZ/</url>
    <content><![CDATA[<p>JavaScript 在編譯階段，會掃描宣告的變數及函式，後儲存在 variable object 裡，使它們可以在宣告前被存取。</p>
<span id="more"></span>

<h1 id="提升-Hoisting"><a href="#提升-Hoisting" class="headerlink" title="提升(Hoisting)"></a>提升(Hoisting)</h1><p>JavaScript 在執行程式碼之前(編譯階段)，會先掃描程式中宣告的變數，並將它們儲存在變數環境物件(variable environment object)中，使某些類型的變數在宣告之前允許被存取。</p>
<table>
  <tr>
    <td></td>
    <td align="center">提升</td>
    <td align="center">原始值</td>
    <td align="center">作用域</td>
  </tr>
  <tr>
    <td align="center">函式宣告(function declaration)</td>
    <td align="center">⭕</td>
    <td align="center">實際函式</td>
    <td align="center">區塊作用域</td>
  </tr>
  <tr>
    <td align="center">var 宣告的變數</td>
    <td align="center">⭕</td>
    <td align="center">undefined</td>
    <td align="center">函式作用域</td>
  </tr>
  <tr>
    <td align="center">let / const 宣告的變數</td>
    <td align="center">⭕</td>
    <td align="center">&lt;uninitialized&gt;, TDZ</td>
    <td align="center">區塊作用域</td>
  </tr>
  <tr>
    <td align="center">函式表達式(function expression)、箭頭函式(arrow function)</td>
    <td align="center" colspan="3">跟據 var 宣告或 let / const 宣告而不同</td>
  </tr>
</table>

<h2 id="let-與-const-的提升"><a href="#let-與-const-的提升" class="headerlink" title="let 與 const 的提升"></a>let 與 const 的提升</h2><p>以 let 或 const 宣告的變數也會提升，但提升後的行為與 var 變數不同，初始值被設定為 unintialized，因此在宣告前存取變數會拋出 <code>ReferenceError: Cannot access &#39;a&#39; before initialization</code> 的錯誤。</p>
<p>程式範例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// ReferenceError: Cannot access &#x27;a&#x27; before initialization</span></span><br><span class="line">  <span class="keyword">let</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<h2 id="為什麼需要提升"><a href="#為什麼需要提升" class="headerlink" title="為什麼需要提升 ?"></a>為什麼需要提升 ?</h2><ol>
<li>在任何地方呼叫函式，不一定要先宣告後呼叫。</li>
<li>函式可以互相呼叫。</li>
</ol>
<h2 id="提升如何運作"><a href="#提升如何運作" class="headerlink" title="提升如何運作 ?"></a>提升如何運作 ?</h2><p>當呼叫一個函式時，即產生一個執行環境(Execution Context，以下簡稱 EC)，每個 EC 會有相對應的 variable object(以下簡稱 VO)，在 EC 中宣告的變數及函式都會儲存在 VO 中，若是函式，參數也會儲存到 VO 裡。</p>
<p>在進入 EC 時，JS 引擎會依照以下順序將變數儲存到 VO 中 :</p>
<p>對於函式的參數，會被儲存為 VO 中的屬性，若是沒有傳值，會被初始化為 undefined :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>那 VO 會像 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>對於函式宣告，同樣會儲存在 VO 裡面，值為函式的回傳值 :<br>假如 VO 中已有同名屬性，就會將其值覆蓋，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>所以 VO 會像 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="keyword">function</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後是變數宣告，同樣存在 VO 裡面，值設為 undefined :<br>若 VO 中已存在同名屬性，值不會改變。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>因此 VO 會像 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後總結一下，當程式執行進入 EC，會依照順序做三件事 :</p>
<ol>
<li>將參數存入 VO 並設定值，若無傳值則為 undefined。</li>
<li>將函式宣告存入 VO，若已有同名屬性則將其值覆蓋。</li>
<li>將變數宣告存入 VO，若已有同名屬性則將其忽略。</li>
</ol>
<h1 id="暫時死區-TDZ"><a href="#暫時死區-TDZ" class="headerlink" title="暫時死區(TDZ)"></a>暫時死區(TDZ)</h1><p>Temporal Dead Zone。指在變數「提升之後」及「賦值之前」的期間。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ---- firstName 的暫時死區 ----</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstName) <span class="comment">// ReferenceError: Cannot access &#x27;firstName&#x27; before initialization</span></span><br><span class="line"><span class="comment">// ----------------------------</span></span><br><span class="line"><span class="keyword">const</span> firstName = <span class="string">&quot;ABen&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(color) <span class="comment">// ReferenceError: color is not defined</span></span><br></pre></td></tr></table></figure>

<p>從上面的程式碼中可以看出，因為 JS 引擎在程式執行前會先掃描程式碼中的變數，進而知道變數尚未初始化，所以若在變數宣告之前存取變數，引擎會將暫時死區中的變數值設為 uninitialized。當程式執行到宣告變數的地方，離開該變數的暫時死區，才可以被存取。</p>
<h2 id="為什麼需要暫時死區"><a href="#為什麼需要暫時死區" class="headerlink" title="為什麼需要暫時死區 ?"></a>為什麼需要暫時死區 ?</h2><ol>
<li>避免在宣告前使用變數。</li>
<li>為了實作 <strong>const</strong>。<ul>
<li>假如沒有暫時死區，若在以 const 宣告變數前存取該變數，那這個變數就會像以 var 宣告的變數一樣，初始值為 undefined，如此一來就違背 const 為常量的定義。</li>
</ul>
</li>
</ol>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting/">我知道你懂 hoisting，可是你了解到多深？</a></li>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - this ?</title>
    <url>/JavaScript-this/</url>
    <content><![CDATA[<p>在 JavaScript 中，<code>this</code> 指的是對目前執行環境的 ThisBinding。而在多數情況下，<code>this</code> 會因為函式的呼叫方式而有所不同。</p>
<span id="more"></span>

<h1 id="關於-this"><a href="#關於-this" class="headerlink" title="關於 this"></a>關於 this</h1><ul>
<li>呼叫函式即生成 <code>this</code>，指向當前函式執行環境。</li>
<li><code>this</code> 非靜態值，影響它的因素為函式的呼叫方法。</li>
<li>多數情況下，<code>this</code> 代表呼叫函式的物件。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">呼叫方法</th>
<th align="center">this</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Method</td>
<td align="center">呼叫函式的物件</td>
</tr>
<tr>
<td align="center">Simple function call</td>
<td align="center">undefined(嚴格模式) &#x2F; window(瀏覽器) &#x2F; global(Node.js)</td>
</tr>
<tr>
<td align="center">Arrow function</td>
<td align="center">父級函式的 <code>this</code> (lexical this)</td>
</tr>
<tr>
<td align="center">Event listener</td>
<td align="center">添加事件的 DOM 元素</td>
</tr>
<tr>
<td align="center"><code>call</code>、<code>apply</code>、<code>bind</code></td>
<td align="center">指定綁定的物件</td>
</tr>
</tbody></table>
<h2 id="以方法形式-Method-呼叫函式"><a href="#以方法形式-Method-呼叫函式" class="headerlink" title="以方法形式(Method)呼叫函式"></a>以方法形式(Method)呼叫函式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aben = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ABen&quot;</span>,</span><br><span class="line">  <span class="attr">year</span>: <span class="number">2021</span>,</span><br><span class="line">  <span class="attr">calcAge</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2023</span> - <span class="variable language_">this</span>.<span class="property">year</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">aben.<span class="title function_">calcAge</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>上面以 aben 物件呼叫 calcAge 方法，<code>this</code> 即指向 aben 物件，所以 <code>this.year</code> 就等於 2021。</p>
<h2 id="直接呼叫函式-Simple-function-call"><a href="#直接呼叫函式-Simple-function-call" class="headerlink" title="直接呼叫函式(Simple function call)"></a>直接呼叫函式(Simple function call)</h2><p>在嚴格模式下， <code>this</code> 為 <code>undefined</code>。在非嚴格模式，瀏覽器中 <code>this</code> 為 <code>window</code>，Node.js 中 <code>this</code> 為 <code>global</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> boo = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">boo</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<p>上面程式中雖然 boo 函式是在 obj 物件的 foo 方法中被呼叫，但因為 boo 函式中沒有特別指明 <code>this</code>，所以預設綁定為 <code>window</code>。</p>
<p>所以 <strong>this 代表的是呼叫函式的物件，而非函式本身</strong>。</p>
<p>而為了使 boo 函式的 <code>this</code> 綁定為 obj 物件，在較舊的程式碼中通常會宣告 <code>self</code> 變數儲存 foo 函式的 <code>this</code> :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> boo = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(self) <span class="comment">// obj</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">boo</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<p>而在 ES6 之後的方法為使用箭頭函式 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">boo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// obj</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">boo</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<h2 id="箭頭函式-Arrow-function"><a href="#箭頭函式-Arrow-function" class="headerlink" title="箭頭函式(Arrow function)"></a>箭頭函式(Arrow function)</h2><p>箭頭函式本身沒有 <code>this</code>，它的 <code>this</code> 必須從父級函式或父級作用域取得。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">boo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// obj</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">boo</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<p>上面程式碼中因為 boo 函式為箭頭函式，所以 <code>this</code> 為從父級函式 foo 中所取得，指向 obj 物件。</p>
<p>陷阱範例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<p>雖然上面程式中以 obj 呼叫 foo 函式，但因為 foo 函式為箭頭函式，所以從父級作用域取得的 <code>this</code> 為 <code>window</code>。</p>
<p>特別注意，建立物件使用的 <code>&#123;&#125;</code> 不具有區塊作用域 ! 所以 foo 函式的父級作用域為全域作用域。</p>
<p>因此<strong>永遠不要使用箭頭函式作為物件的方法</strong>。</p>
<h2 id="事件監聽-Event-listener"><a href="#事件監聽-Event-listener" class="headerlink" title="事件監聽(Event listener)"></a>事件監聽(Event listener)</h2><p>事件監聽中的 <code>this</code> 為綁定事件的 DOM 元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>點我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#btn&quot;</span>)</span><br><span class="line"></span><br><span class="line">btnEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// &lt;button id=&quot;btn&quot;&gt;點我&lt;/button&gt;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>特別注意，若回調函式為箭頭函式，則 <code>this</code> 為從父級作用域也就是全域作用域取得之 <code>window</code>。</p>
<h2 id="bind-與-call-x2F-apply"><a href="#bind-與-call-x2F-apply" class="headerlink" title="bind 與 call &#x2F; apply"></a>bind 與 call &#x2F; apply</h2><p>使用 <code>bind</code>、<code>call</code>、<code>apply</code> 來強制綁定 <code>this</code>。</p>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>借用已建立的函式來創建新的函式，並將指定的物件綁訂為新函式的 <code>this</code> :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aben = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newFunc = getAge.<span class="title function_">bind</span>(aben)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">newFunc</span>()) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>也可以在創建新函式的同時預先傳入參數 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newFunc = sum.<span class="title function_">bind</span>(<span class="variable language_">this</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">newFunc</span>(<span class="number">1</span>)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="call-x2F-apply"><a href="#call-x2F-apply" class="headerlink" title="call &#x2F; apply"></a>call &#x2F; apply</h3><p>使用給定的物件呼叫函式，並將 <code>this</code> 綁定為該物件。</p>
<p>使用 <code>call</code> :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aben = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ABen&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params">age, breed</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is a <span class="subst">$&#123;age&#125;</span>-year-old <span class="subst">$&#123;breed&#125;</span> breed dog.`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callName.<span class="title function_">call</span>(aben, <span class="number">2</span>, <span class="string">&quot;mixed&quot;</span>) <span class="comment">// ABen is a 2-year-old mixed breed dog.</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>apply</code> :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aben = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ABen&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params">age, breed</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is a <span class="subst">$&#123;age&#125;</span>-year-old <span class="subst">$&#123;breed&#125;</span> breed dog.`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callName.<span class="title function_">apply</span>(aben, [<span class="number">2</span>, <span class="string">&quot;mixed&quot;</span>]) <span class="comment">// ABen is a 2-year-old mixed breed dog.</span></span><br></pre></td></tr></table></figure>

<p>兩者差別在於傳遞參數的類型，<code>call</code> 為一般參數形式傳遞，<code>apply</code> 則是陣列形式傳遞。</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://kuro.tw/posts/2017/10/12/What-is-THIS-in-JavaScript-%E4%B8%8A/">What’s THIS in JavaScript ? </a></li>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - 原始類型(Primitive)與物件類型(Object)</title>
    <url>/JavaScript-%E5%8E%9F%E5%A7%8B%E9%A1%9E%E5%9E%8B-Primitive-%E8%88%87%E7%89%A9%E4%BB%B6%E9%A1%9E%E5%9E%8B-Object/</url>
    <content><![CDATA[<p>原始類型(Primitive)與物件類型(Object)的差別在於兩者儲存的位置以及儲存的值，原始類型存於 Call Stack 中且儲存實際值，物件類型存於 Heap 中且儲存對物件的參考地址。</p>
<span id="more"></span>

<h1 id="原始類型-Primitive"><a href="#原始類型-Primitive" class="headerlink" title="原始類型(Primitive)"></a>原始類型(Primitive)</h1><p>在 JavaScript 中的原始數據類型有 :</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>undefined</li>
<li>null</li>
<li>BigInt</li>
<li>Symbol</li>
</ul>
<h2 id="call-by-value"><a href="#call-by-value" class="headerlink" title="call by value"></a>call by value</h2><p>原始數據類型操縱的值為實際的賦值(call by value) :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> oldAge = age</span><br><span class="line">age = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldAge) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>上面程式碼中因為宣告的變數是原始數據類型，所以儲存於 Call Stack 中，首先宣告 <code>age</code> 變數，JS 以變數名稱創建唯一的標識符(Identifier)，然後分配一塊記憶體並提供記憶體位址(Address)，最後將賦值(Value) <code>2</code> 存到記憶體中。</p>
<p>第二步宣告 <code>oldAge</code> 等於 <code>age</code>，JS 先創建標識符，後分配到另一記憶體位置，再將 <code>age</code> 的值存入記憶體。</p>
<p>最後，將 <code>age</code> 重新賦值為 <code>3</code>，JS 通過唯一的標識符，取得儲存 <code>age</code> 的記憶體位址，再將原來的 <code>2</code> 改成 <code>3</code>。</p>
<p>在 JS 引擎中 :<br><img src="/JavaScript-%E5%8E%9F%E5%A7%8B%E9%A1%9E%E5%9E%8B-Primitive-%E8%88%87%E7%89%A9%E4%BB%B6%E9%A1%9E%E5%9E%8B-Object/primitive_in_engine.webp" alt="原始類型儲存方式"></p>
<h1 id="物件類型-Object"><a href="#物件類型-Object" class="headerlink" title="物件類型(Object)"></a>物件類型(Object)</h1><p>在 JavaScript 中的物件類型有 :</p>
<ul>
<li>Object</li>
<li>Function</li>
<li>Array</li>
</ul>
<h2 id="call-by-reference"><a href="#call-by-reference" class="headerlink" title="call by reference"></a>call by reference</h2><p>物件類型操縱的值為對物件的參考地址(call by reference) :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aben = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> black = aben</span><br><span class="line">black.<span class="property">age</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;black:&quot;</span>, black) <span class="comment">// &#123;age: 3&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aben:&quot;</span>, aben) <span class="comment">// &#123;age: 3&#125;</span></span><br></pre></td></tr></table></figure>

<p>上面程式碼中，首先宣告 <code>aben</code> 物件，此物件會直接儲存在 Heap 裡面，JS 在 Call Stack 中創建唯一標識符 <code>aben</code>，分配記憶體空間，而裡面儲存的值為對 Heap 中物件記憶體位址的參考(reference)。</p>
<p>再來，宣告 <code>black</code> 物件等於 <code>aben</code> 物件，JS 同樣創建唯一標識符，分配記憶體空間，同樣儲存 Heap 中 <code>aben</code> 物件記憶體位址的參考，也就是說 <code>black</code> 與 <code>aben</code> 都指向同一物件。</p>
<p>最後 <code>black</code> 物件修改 <code>age</code> 值，因為 <code>black</code> 與 <code>aben</code> 實際上都指向同一物件，所以最終兩者都改為 <code>3</code>。</p>
<p>在 JS 引擎中 :<br><img src="/JavaScript-%E5%8E%9F%E5%A7%8B%E9%A1%9E%E5%9E%8B-Primitive-%E8%88%87%E7%89%A9%E4%BB%B6%E9%A1%9E%E5%9E%8B-Object/object_in_engine.webp" alt="物件類型的儲存方式"></p>
<h2 id="call-by-sharing"><a href="#call-by-sharing" class="headerlink" title="call by sharing"></a>call by sharing</h2><p>讓作為參數傳入的物件與函式中的參數物件共享同一物件。</p>
<p>看看下面的範例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aben = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeAge</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  obj = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">changeAge</span>(aben)) <span class="comment">// &#123;age: 3&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben) <span class="comment">// &#123;age: 2&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>aben</code> 物件竟然還是原來的值，若物件類型是 call by reference 的話，<code>aben</code> 應該要大一歲才對。</p>
<p>這是因為當 <code>aben</code> 物件作為參數傳入函式時，是讓函數中的 <code>obj</code> 參數與 <code>aben</code> 共享一個物件，若是使用 <code>obj.age</code> 的方式重新賦值，那 <code>aben</code> 的年齡確實會改變，但是實際上在函式中卻是將一個新的物件賦值給 <code>obj</code> 參數，這樣 <code>obj</code> 與 <code>aben</code> 就指向不同的物件，也就是說函式執行後另外創建了一個物件，因此 <code>aben</code> 的年齡並沒有改變。</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
<li><a href="https://hulitw.medium.com/variable-and-frontdesk-a53a0440af3c">從博物館寄物櫃理解變數儲存模型</a></li>
<li><a href="https://pjchender.blogspot.com/2016/03/javascriptby-referenceby-value.html">[筆記] 談談 JavaScript 中 by reference 和 by value 的重要觀念</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10191057">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a></li>
<li><a href="https://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc">JS 基本觀念：call by value 還是 reference 又或是 sharing?</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - 解構賦值(Destructuring Assignment)</title>
    <url>/JavaScript-%E8%A7%A3%E6%A7%8B%E8%B3%A6%E5%80%BC-Destructuring-Assignment/</url>
    <content><![CDATA[<p>解構賦值可以用來提取陣列或物件中的資料，讓原本可能需要迴圈或迭代的功能可以用更簡易的語句來達成。而展開運算符與其餘運算符可以讓我們更靈活的使用函式，在處理從 API 取得的資料時也更加容易。</p>
<span id="more"></span>

<h1 id="解構陣列-Destructuring-Array"><a href="#解構陣列-Destructuring-Array" class="headerlink" title="解構陣列(Destructuring Array)"></a>解構陣列(Destructuring Array)</h1><p>範例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本用法</span></span><br><span class="line"><span class="keyword">const</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>] <span class="comment">// a = 1, b = 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 略過某些值</span></span><br><span class="line"><span class="keyword">const</span> [a, , b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// a = 1, b = 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交換變數值</span></span><br><span class="line"><span class="keyword">let</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">;[a, b] = [b, a] <span class="comment">// a = 2, b = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套的陣列</span></span><br><span class="line"><span class="keyword">const</span> [a, [b, c]] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]] <span class="comment">// a = 1, b = 2, c = 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定默認值</span></span><br><span class="line"><span class="keyword">const</span> [a = <span class="number">0</span>, b = <span class="number">1</span>, c] = [<span class="number">1</span>] <span class="comment">// a = 1, b = 1, c = undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字串</span></span><br><span class="line"><span class="keyword">const</span> [a] = <span class="string">&quot;ABen&quot;</span> <span class="comment">// a = A</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其餘運算符(Rest Operator)</span></span><br><span class="line"><span class="keyword">const</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// a = 1, b = [2, 3]</span></span><br></pre></td></tr></table></figure>

<h1 id="解構物件-Destructuring-Object"><a href="#解構物件-Destructuring-Object" class="headerlink" title="解構物件(Destructuring Object)"></a>解構物件(Destructuring Object)</h1><p>範例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本用法</span></span><br><span class="line"><span class="keyword">const</span> &#123; dog &#125; = &#123; <span class="attr">dog</span>: <span class="string">&quot;ABen&quot;</span> &#125; <span class="comment">// dog = ABen</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 賦予新的變數名</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">dog</span>: dogName &#125; = &#123; <span class="attr">dog</span>: <span class="string">&quot;ABen&quot;</span> &#125; <span class="comment">// dogName = ABen</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定默認值</span></span><br><span class="line"><span class="keyword">const</span> &#123; dog, age = <span class="number">2</span>, color &#125; = &#123; <span class="attr">dog</span>: <span class="string">&quot;ABen&quot;</span> &#125; <span class="comment">// dog = ABen, age = 2, color = undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改變變數</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">111</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">222</span>((&#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;)) <span class="comment">// a = 1, b = 2</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  在 JS 中 `&#123;&#125;` 代表程式區塊，所以無法被賦值，需要在外部包 `()` 代表運算，才可正常執行。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套的物件</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123; b, c &#125;,</span><br><span class="line">&#125; = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125; &#125; <span class="comment">// b = 2, c = 3</span></span><br></pre></td></tr></table></figure>

<h1 id="展開運算符-Spread-Operator-與其餘運算符-Rest-Operator"><a href="#展開運算符-Spread-Operator-與其餘運算符-Rest-Operator" class="headerlink" title="展開運算符(Spread Operator)與其餘運算符(Rest Operator)"></a>展開運算符(Spread Operator)與其餘運算符(Rest Operator)</h1><p>為 ES6 的新特性，兩者語法皆為 <code>...</code>。</p>
<h2 id="展開運算符-Spread-Operator"><a href="#展開運算符-Spread-Operator" class="headerlink" title="展開運算符(Spread Operator)"></a>展開運算符(Spread Operator)</h2><p>可以將陣列展開成個別的值。在定義陣列或函式呼叫傳入陣列時使用。</p>
<p>組合陣列 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = [<span class="number">0</span>, ...arr]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>複製陣列 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="keyword">const</span> copyArr = [...arr]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copyArr) <span class="comment">// [1, 2, [3, 4]]</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是展開運算符為淺複製(shallow-copy)，對於子物件只會複製其參考值(reference)。</p>
<p>呼叫函式時傳入陣列 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c) <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(...arr)</span><br></pre></td></tr></table></figure>

<p>只有可迭代的值可以使用展開運算符傳入函式。可迭代的值包含 String、Array、Map、Set，但不包括 Object。</p>
<p>組合物件 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...obj, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj) <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="其餘運算符-Rest-Operator"><a href="#其餘運算符-Rest-Operator" class="headerlink" title="其餘運算符(Rest Operator)"></a>其餘運算符(Rest Operator)</h2><p>將剩餘的值包裝成一個陣列。</p>
<p>解構陣列 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, ...c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] <span class="comment">// a = 1, b = 2, c = [3, 4]</span></span><br></pre></td></tr></table></figure>

<p>特別注意，使用其餘運算符的元素必須要是最後一個元素，並且在每次解構賦值中只能使用一次。</p>
<p>解構物件 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; a, ...obj &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125; <span class="comment">// a = 1, obj = &#123;b: &#123;c: 2&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>函式其餘參數 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若參數原本為陣列</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="title function_">sum</span>(...arr) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<p>當其餘參數沒有傳入實際值時，會變空陣列，而不是 <code>undefined</code>。</p>
<p>其餘參數的設計是為了取代函式中的 <code>arguments</code> 關鍵字，<code>arguments</code> 實際為包含所有傳入參數的類陣列(array-like)物件，所以本身不具備陣列相關的方法，因此不建議使用 <code>arguments</code>。</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
<li><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/destructuring.html">解構賦值· 從 ES6 開始的 JavaScript 學習生活</a></li>
<li><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html">展開運算符與其餘運算符· 從 ES6 開始的 JavaScript 學習生活</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - 可選鏈(Optional Chaining)</title>
    <url>/JavaScript-%E5%8F%AF%E9%81%B8%E9%8F%88-Optional-Chaining/</url>
    <content><![CDATA[<p>在取得 API 響應並存取數據時，時常會遇到 <code>TypeError: Cannot read property &#39;xxx&#39; of null</code> 或是 <code>TypeError: Cannot read property &#39;xxx&#39; of undefined</code> 的錯誤，而造成錯誤的原因就是試圖從 nullish value 上讀取屬性或調用方法，為了解決這個問題，可以在取值時使用可選鏈，以免程式拋出錯誤。</p>
<span id="more"></span>

<h1 id="可選鏈-Optional-Chaining"><a href="#可選鏈-Optional-Chaining" class="headerlink" title="可選鏈(Optional Chaining)"></a>可選鏈(Optional Chaining)</h1><p>用來避免在從 nullish value(<code>null</code> 或 <code>undefined</code>)上讀取屬性或調用方法時拋出錯誤，語法為 <code>?.</code>。</p>
<p>使用範例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pets = &#123;</span><br><span class="line">  <span class="attr">dog</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;ABen&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未使用可選鏈</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pets.<span class="property">cat</span>.<span class="property">name</span>) <span class="comment">// TypeError: Cannot read properties of undefined (reading &#x27;name&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用可選鏈</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pets.<span class="property">cat</span>?.<span class="property">name</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>當存取物件中不存在的屬性時，若沒有使用可選鏈就會報錯，而使用可選鏈則會回傳 <code>undefined</code>。</p>
<p>在可選鏈出現之前，為了避免錯誤，通常會這麼做 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pets = &#123;</span><br><span class="line">  <span class="attr">dog</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;ABen&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pets.<span class="property">cat</span> &amp;&amp; pets.<span class="property">cat</span>.<span class="property">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pets.<span class="property">cat</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣的寫法雖然可以避免錯誤，但是若需要存取巢狀物件的深層屬性時，那就必須要更多的判斷才能確保程式不報錯，所以為了簡潔與可讀性，使用可選鏈 <code>?.</code> 是更好的選擇。</p>
<p>調用方法 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aben = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ABen&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben.<span class="property">fly</span>?.() ?? <span class="string">&quot;Method does not exist&quot;</span>) <span class="comment">// Method does not exist</span></span><br></pre></td></tr></table></figure>

<p>上面程式碼中呼叫 <code>aben</code> 物件中不存在的 <code>fly</code> 方法，但因為使用可選鏈，所以回傳 <code>undefined</code> 而不會報錯，並且搭配空值合併運算符(Nullish Coalescing Operator) <code>??</code>，以回傳除了 <code>undefined</code> 與 <code>null</code> 的其他值。</p>
<p>存取陣列數據 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pets = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;ABen&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pets[<span class="number">0</span>]?.<span class="property">name</span> ?? <span class="string">&quot;Pet array empty&quot;</span>) <span class="comment">// ABen</span></span><br></pre></td></tr></table></figure>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
<li><a href="https://www.tpisoftware.com/tpu/articleDetails/2533">JavaScript 可選鏈運算符 (?.) 與 空值合併運算符 (??) 介紹</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - Set 與 Map</title>
    <url>/JavaScript-Set-%E8%88%87-Map/</url>
    <content><![CDATA[<p>Set 與 Map 都是 JavaScript 中特殊的資料結構，Set 與 Array 相似，但其中的每一個元素都是唯一值，不會有重複元素，主要用途是去除重複出現的元素與判斷元素存在與否；Map 則與 Object 相似，其中的 key 值映射對應 value，而 key 可以使用任意類型的值定義，且亦具備唯一性。</p>
<span id="more"></span>

<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>具有不重複元素的集合。存在的意義是判斷 Set 中是否包含某個元素，所以重點不在於從 Set 中將元素取出。</p>
<p>去除陣列中的重複元素 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrSet = <span class="keyword">new</span> <span class="title class_">Set</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSet) <span class="comment">// Set(4) &#123;0, 1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure>

<p>Set 與陣列的轉換 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrSet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">SetToArray</span> = [...arrSet] <span class="comment">// Array.from(arrSet)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">ArrayToSet</span> = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="title class_">SetToArray</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Set-的屬性與方法"><a href="#Set-的屬性與方法" class="headerlink" title="Set 的屬性與方法"></a>Set 的屬性與方法</h2><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>回傳 Set 中的元素數量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrSet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSet.<span class="property">size</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h3><p>檢查 Set 中是否存在指定元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrSet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSet.<span class="title function_">has</span>(<span class="number">1</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSet.<span class="title function_">has</span>(<span class="number">4</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><p>在 Set 中添加元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrSet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">arrSet.<span class="title function_">add</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSet) <span class="comment">// Set(5) &#123;0, 1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h3><p>刪除 Set 中的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrSet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">arrSet.<span class="title function_">delete</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSet) <span class="comment">// Set(3) &#123;0, 1, 2&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>清空 Set 中的所有元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrSet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">arrSet.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSet) <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>Map 是與物件(Object)相似的鍵值對(key-value pair)數據結構，Map 中的鍵(key)會映射到對應的值(value)。兩者具有以下差異 :</p>
<ul>
<li>Map 中的 key 可以是任何類型的值，而 Object 的 key 只能是 <code>String</code> 或 <code>Symbol</code>。</li>
<li>Map 中的 key 會依添加時間排序，Object 無順序性。</li>
<li>Map 中的 key 是唯一值，若重複添加則舊的 value 會被覆蓋。</li>
<li>需要經常增添、刪減屬性的資料，使用 Map 的效能較 Object 佳。</li>
</ul>
<p>建立 Map :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立空的 Map</span></span><br><span class="line"><span class="keyword">const</span> emptyMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立時添加鍵值對</span></span><br><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ABen&quot;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&quot;age&quot;</span>],</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>Map 為可迭代(iterable)的資料結構，所以可以使用 for loop :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ABen&quot;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&quot;age&quot;</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> newMap) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>) <span class="comment">// name: ABen  2: age</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以物件類型的值作為 key 時 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">newMap.<span class="title function_">set</span>(arr, <span class="string">&quot;Test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap.<span class="title function_">get</span>([<span class="number">1</span>, <span class="number">2</span>])) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap.<span class="title function_">get</span>(arr)) <span class="comment">// Test</span></span><br></pre></td></tr></table></figure>

<p>要特別注意因為物件類型儲存的值為 Heap 中記憶體位址的參考(reference)，所以當上面程式中執行 <code>newMap.get([1, 2])</code> 取值時，指定的陣列 <code>[1, 2]</code> 與先前所設定的陣列 <code>arr</code> 為兩個不同的陣列，因此回傳 <code>undefined</code>。</p>
<p>物件轉換成 Map :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aben = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ABen&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(aben))) <span class="comment">// Map(2) &#123; &#x27;name&#x27; =&gt; &#x27;ABen&#x27;, &#x27;age&#x27; =&gt; 2 &#125;</span></span><br></pre></td></tr></table></figure>

<p>Map 轉換成陣列 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aben = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Aben&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">2</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...aben]) <span class="comment">// [ [ &#x27;name&#x27;, &#x27;Aben&#x27; ], [ &#x27;age&#x27;, 2 ] ]</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...aben.<span class="title function_">entries</span>()]) <span class="comment">// [ [ &#x27;name&#x27;, &#x27;Aben&#x27; ], [ &#x27;age&#x27;, 2 ] ]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...aben.<span class="title function_">keys</span>()]) <span class="comment">// [ &#x27;name&#x27;, &#x27;age&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...aben.<span class="title function_">values</span>()]) <span class="comment">// [ &#x27;Aben&#x27;, 2 ]</span></span><br></pre></td></tr></table></figure>

<p>猜謎小範例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> question = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;question&quot;</span>, <span class="string">&quot;What is the cutest animal in the world?&quot;</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&quot;ABen&quot;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&quot;ACat&quot;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&quot;ABird&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;correct&quot;</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="literal">true</span>, <span class="string">&quot;Correct!&quot;</span>],</span><br><span class="line">  [<span class="literal">false</span>, <span class="string">&quot;Wrong!&quot;</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(question.<span class="title function_">get</span>(<span class="string">&quot;question&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> question) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> key === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Answer <span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> answer = <span class="title class_">Number</span>(<span class="title function_">prompt</span>(<span class="string">&quot;Your answer&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(question.<span class="title function_">get</span>(question.<span class="title function_">get</span>(<span class="string">&quot;correct&quot;</span>) === answer))</span><br></pre></td></tr></table></figure>

<h2 id="Map-的屬性與方法"><a href="#Map-的屬性與方法" class="headerlink" title="Map 的屬性與方法"></a>Map 的屬性與方法</h2><h3 id="size-1"><a href="#size-1" class="headerlink" title="size"></a>size</h3><p>回傳 Map 中的鍵值對數量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">newMap.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ABen&quot;</span>).<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&quot;age&quot;</span>).<span class="title function_">set</span>(<span class="literal">true</span>, <span class="string">&quot;ABen is cute &lt;3&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap.<span class="property">size</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="has-1"><a href="#has-1" class="headerlink" title="has()"></a>has()</h3><p>檢查 Map 中是否有指定的 key。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">newMap.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ABen&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap.<span class="title function_">has</span>(<span class="string">&quot;name&quot;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap.<span class="title function_">has</span>(<span class="number">2</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><p>在 Map 中添加一個鍵值對，本身也會回傳更新後的 Map，所以可以進行鏈式調用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ABen&quot;</span>)) <span class="comment">// Map(1) &#123; &#x27;name&#x27; =&gt; &#x27;ABen&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">newMap.<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&quot;age&quot;</span>).<span class="title function_">set</span>(<span class="literal">true</span>, <span class="string">&quot;ABen is cute &lt;3&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap) <span class="comment">// Map(3) &#123; &#x27;name&#x27; =&gt; &#x27;ABen&#x27;, 2 =&gt; &#x27;age&#x27;, true =&gt; &#x27;ABen is cute &lt;3&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>取得 Map 中特定 key 值所映射的 value。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">newMap.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ABen&quot;</span>) <span class="comment">// Map(1) &#123; &#x27;name&#x27; =&gt; &#x27;ABen&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>)) <span class="comment">// ABen</span></span><br></pre></td></tr></table></figure>

<h3 id="delete-1"><a href="#delete-1" class="headerlink" title="delete()"></a>delete()</h3><p>刪除指定 key 的鍵值對。回傳是否刪除。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">newMap.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ABen&quot;</span>) <span class="comment">// Map(1) &#123; &#x27;name&#x27; =&gt; &#x27;ABen&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">newMap.<span class="title function_">delete</span>(<span class="string">&quot;name&quot;</span>) <span class="comment">// Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="clear-1"><a href="#clear-1" class="headerlink" title="clear()"></a>clear()</h3><p>清除 Map 中所有鍵值對。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">newMap.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ABen&quot;</span>).<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&quot;age&quot;</span>).<span class="title function_">set</span>(<span class="literal">true</span>, <span class="string">&quot;ABen is cute &lt;3&quot;</span>)</span><br><span class="line"></span><br><span class="line">newMap.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newMap) <span class="comment">// Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
<li><a href="https://pjchender.dev/javascript/js-set/#%E9%99%A3%E5%88%97%E8%88%87%E9%9B%86%E5%90%88%E9%96%93%E8%BD%89%E6%8F%9B">[JS] JavaScript 集合（Set）</a></li>
<li><a href="https://pjchender.dev/javascript/js-map/">[JS] JavaScript Map</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端小技巧 - 頁面平滑滾動</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A0%81%E9%9D%A2%E5%B9%B3%E6%BB%91%E6%BB%BE%E5%8B%95/</url>
    <content><![CDATA[<p>以純 CSS 或 JavaScript 完成三個網頁平滑滾動的方法。</p>
<span id="more"></span>

<h1 id="方法一－純-CSS"><a href="#方法一－純-CSS" class="headerlink" title="方法一－純 CSS"></a>方法一－純 CSS</h1><p>HTML 中設定 <code>a</code> 標籤錨點為對應區塊的 <code>id</code>，即具備默認的滾動效果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#section1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>section 01<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#section2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>section 02<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#section3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>section 03<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;full-page&quot;</span> <span class="attr">id</span>=<span class="string">&quot;section1&quot;</span>&gt;</span>section 01<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;full-page&quot;</span> <span class="attr">id</span>=<span class="string">&quot;section2&quot;</span>&gt;</span>section 02<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;full-page&quot;</span> <span class="attr">id</span>=<span class="string">&quot;section3&quot;</span>&gt;</span>section 03<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之後在 CSS 中的 <code>html</code> 標籤上設定 <code>scroll-behavior</code> 屬性，使頁面平滑滾動。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  scroll-behavior: smooth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>實際效果 :</p>
<iframe src="https://codepen.io/fan94105/embed/preview/jOQQPZQ?default-tab=css,result&theme-id=light" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe>

<h1 id="方法二－scrollIntoView"><a href="#方法二－scrollIntoView" class="headerlink" title="方法二－scrollIntoView()"></a>方法二－scrollIntoView()</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">data-section</span>=<span class="string">&quot;#section1&quot;</span>&gt;</span>section 01<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">data-section</span>=<span class="string">&quot;#section2&quot;</span>&gt;</span>section 02<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">data-section</span>=<span class="string">&quot;#section3&quot;</span>&gt;</span>section 03<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;full-page&quot;</span> <span class="attr">id</span>=<span class="string">&quot;section1&quot;</span>&gt;</span>section 01<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;full-page&quot;</span> <span class="attr">id</span>=<span class="string">&quot;section2&quot;</span>&gt;</span>section 02<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;full-page&quot;</span> <span class="attr">id</span>=<span class="string">&quot;section3&quot;</span>&gt;</span>section 03<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>scrollIntoView()</code> 方法，將調用方法的元素顯示到視窗中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.btn&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> section1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#section1&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> section2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#section2&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> section3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#section3&quot;</span>)</span><br><span class="line"></span><br><span class="line">btns.<span class="title function_">forEach</span>(<span class="function"><span class="params">btn</span> =&gt;</span></span><br><span class="line">  btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> section = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">section</span>)</span><br><span class="line">    section.<span class="title function_">scrollIntoView</span>(&#123; <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>實際效果 :</p>
<iframe src="https://codepen.io/fan94105/embed/preview/wvQQaVY?default-tab=js,result&theme-id=light" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe>

<h1 id="方法三－scrollTo"><a href="#方法三－scrollTo" class="headerlink" title="方法三－scrollTo()"></a>方法三－scrollTo()</h1><p>HTML 配置與方法二相同。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.btn&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> section1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#section1&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> section2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#section2&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> section3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#section3&quot;</span>)</span><br><span class="line"></span><br><span class="line">btns.<span class="title function_">forEach</span>(<span class="function"><span class="params">btn</span> =&gt;</span></span><br><span class="line">  btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> section = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">section</span>)</span><br><span class="line">    <span class="keyword">const</span> coords = section.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">      <span class="attr">top</span>: coords.<span class="property">top</span> + <span class="variable language_">window</span>.<span class="property">scrollY</span>,</span><br><span class="line">      <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>getBoundingClientRect()</code> 取得元素的大小及相對於視窗中的位置。而在 <code>scrollTo()</code> 方法內，<code>top</code> 屬性中 <code>coords.top</code> 為目前元素相對視窗頂部的距離，所以還要加上 <code>window.scrollY</code> 即視窗已經滾動的距離，如此元素才能準確地顯示於視窗中。</p>
<p>實際效果 :</p>
<iframe src="https://codepen.io/fan94105/embed/preview/OJaayWr?default-tab=js,result&theme-id=light" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://tools.wingzero.tw/article/sn/224">[CSS] 使用 scroll-behavior 達成免用 js 的平滑滾動效果</a></li>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
</ul>
]]></content>
      <categories>
        <category>前端小技巧</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - DOM 事件傳遞(冒泡 &amp; 捕獲)</title>
    <url>/JavaScrip-DOM-%E4%BA%8B%E4%BB%B6%E5%82%B3%E9%81%9E-%E5%86%92%E6%B3%A1-%E6%8D%95%E7%8D%B2/</url>
    <content><![CDATA[<p>當元素綁定的事件被觸發時，會經過三個階段，捕獲階段(CAPTURING_PHASE)、目標階段(AT_TARGET)與冒泡階段(BUBBLING_PHASE)。</p>
<span id="more"></span>

<h1 id="事件傳遞"><a href="#事件傳遞" class="headerlink" title="事件傳遞"></a>事件傳遞</h1><p>首先看看事件傳遞的表現，在 HTML 中設定一個外部元素 <code>outer</code> 與內部元素 <code>inner</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>將兩個元素分別綁定點擊事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.outer&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.inner&quot;</span>)</span><br><span class="line"></span><br><span class="line">outer.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;outer&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">inner.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inner&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>執行的結果 :</p>
<p><img src="/JavaScrip-DOM-%E4%BA%8B%E4%BB%B6%E5%82%B3%E9%81%9E-%E5%86%92%E6%B3%A1-%E6%8D%95%E7%8D%B2/dom-bubbling.webp" alt="事件傳遞的表現"></p>
<p>可以發現，當內部元素 <code>inner</code> 被點擊時，在 console 中不只印出 “inner”，也印出了 “outer”，這顯示出當在觸發內部元素事件的同時，外部元素的相同事件也會一起被觸發。</p>
<h1 id="傳遞階段"><a href="#傳遞階段" class="headerlink" title="傳遞階段"></a>傳遞階段</h1><p>DOM 事件傳遞分成三個階段 :</p>
<ul>
<li>捕獲階段(CAPTURING_PHASE) : 事件從 <code>window</code> 向下傳遞到目標元素的過程。</li>
<li>目標階段(AT_TARGET) : 事件傳遞到目標本身。</li>
<li>冒泡階段(BUBBLING_PHASE) : 事件由目標向上傳遞回 <code>window</code>。</li>
</ul>
<p><img src="/JavaScrip-DOM-%E4%BA%8B%E4%BB%B6%E5%82%B3%E9%81%9E-%E5%86%92%E6%B3%A1-%E6%8D%95%E7%8D%B2/w3c-dom-event-flow.webp" alt="DOM 事件傳遞示意圖"></p>
<center>( 圖片來源 : W3C - event flow )</center>

<p>在 <code>addEventListener()</code> 回調函式中，可以通過事件物件 <code>e</code> 的 <code>eventPhase</code> 屬性，確認當前事件在傳遞中的哪一個階段被觸發。</p>
<p>而 <code>addEventListener()</code> 的第三個參數為 <code>useCapture</code>，意思是 listener 是否在捕獲階段被觸發。若為 <code>true</code>，即決定回調函式觸發於捕獲階段，為 <code>false</code> 則觸發於冒泡階段。</p>
<p>用與上例相同的 HTML 結構，看看以下範例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.outer&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.inner&quot;</span>)</span><br><span class="line"></span><br><span class="line">outer.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;outer CAPTURING:&quot;</span>, e.<span class="property">eventPhase</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line">outer.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;outer BUBBLING:&quot;</span>, e.<span class="property">eventPhase</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line">inner.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inner CAPTURING:&quot;</span>, e.<span class="property">eventPhase</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line">inner.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inner BUBBLING:&quot;</span>, e.<span class="property">eventPhase</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>當點擊內部元素 <code>inner</code> 後，得到的結果為 : ( <code>1</code> : 捕獲階段，<code>2</code> : 目標階段，<code>3</code> : 冒泡階段。)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;outer CAPTURING:&quot; 1</span><br><span class="line">&quot;inner CAPTURING:&quot; 2</span><br><span class="line">&quot;inner BUBBLING:&quot; 2</span><br><span class="line">&quot;outer BUBBLING:&quot; 3</span><br></pre></td></tr></table></figure>

<p>可以看到首先事件捕獲到外部元素 <code>outer</code>，接著來到目標元素 <code>inner</code>，最後再冒泡傳回 <code>outer</code>。</p>
<p>而在過程中內部元素的 <code>eventPhase</code> 都是 <code>2</code>，也就是說當事件已經傳到目標身上進入目標階段(AT_TARGET)時，就沒有捕獲與冒泡的分別。</p>
<iframe src="https://codepen.io/fan94105/embed/preview/GRwwNBM?default-tab=html,result&theme-id=light" width="%" height="}" frameborder="0" loading="lazy" allowfullscreen></iframe>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
<li><a href="https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/">DOM 的事件傳遞機制：捕獲與冒泡</a></li>
<li><a href="https://www.w3.org/TR/DOM-Level-3-Events/#event-flow">W3C - event flow</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - DOM</title>
    <url>/JavaScript-DOM/</url>
    <content><![CDATA[<p>文件物件模型(Document Object Model，DOM)，為 HTML 文件的程式介面，提供 HTML 文件樹狀結構的模型，本身並不是 JavaScript 的一部分。</p>
<span id="more"></span>

<h1 id="DOM-API-的組織"><a href="#DOM-API-的組織" class="headerlink" title="DOM API 的組織"></a>DOM API 的組織</h1><p>在 DOM tree 中的每個元素都是一個節點(Node)，每個節點以 JavaScript 物件表示，擁有許多屬性及方法。</p>
<p>節點分為四種類型 :</p>
<ul>
<li>元素(Element) : 元素節點具有子類型 HTMLElement。<ul>
<li>HTMLElement : 每個 HTML 元素都有各自的類型。</li>
</ul>
</li>
<li>文字(Text)</li>
<li>注釋(Comment)</li>
<li>文檔(Document)</li>
</ul>
<p>節點之間存在繼承關係，即子節點可以存取父節點的屬性與方法。</p>
<p>而在節點(Node)之上，存在一個抽象節點 EventTarget，其擁有事件監聽的方法，如 <code>addEventListener()</code>，所以在 DOM 中的其他節點才能夠進行事件監聽。</p>
<p>示意圖 :</p>
<p><img src="/JavaScript-DOM/dom_organized.webp" alt="DOM API 組織圖"></p>
<center>( 圖片來源 : The Complete JavaScript Course 2023: From Zero to Expert! )</center>

<h1 id="操作-DOM"><a href="#操作-DOM" class="headerlink" title="操作 DOM"></a>操作 DOM</h1><p>選取(Select)、創建(Create)與刪除(Delete) HTML 元素的各種方法。</p>
<h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><p><code>querySelector()</code> 回傳第一個符合選擇器(tag、id 或 class)的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selectors)</span><br></pre></td></tr></table></figure>

<p><code>querySelectorAll()</code> 回傳所有符合選擇器(tag、id 或 class)的節點清單(NodeList)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selectors)</span><br></pre></td></tr></table></figure>

<p><code>getElementById()</code> 回傳符合特定 id 選擇器的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id)</span><br></pre></td></tr></table></figure>

<p><code>getElementsByTagName()</code> 回傳特定標籤(tag)的 HTML 元素集合(HTMLCollection)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(name)</span><br></pre></td></tr></table></figure>

<p><code>getElementsByClassName()</code> 回傳符合特定的 class 選擇器的 HTML 元素集合(HTMLCollection)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(name)</span><br></pre></td></tr></table></figure>

<p><strong>HTMLCollection 為動態集合</strong>，當 DOM 更新時，在 HTMLCollection 中的元素也會自動更新。</p>
<h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><p><code>insertAdjacentHTML()</code> 將字串解析成 HTML，並插入到 DOM tree 中的指定位置，可以同時創建並插入元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">const</span> parent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> text = <span class="string">`&lt;p&gt;ABen 🐾&lt;/p&gt;`</span></span><br><span class="line">parent.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;afterend&quot;</span>, text)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parent)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  &lt;div&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;p&gt;ABen 🐾&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;/div&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p><code>createElement()</code> 創建 HTML 元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(tagName)</span><br></pre></td></tr></table></figure>

<p>在下面的 HTML 中插入元素 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>ABen 🐾<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>prepend()</code> 在元素的第一個子節點前插入元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> parent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br><span class="line"></span><br><span class="line">parent.<span class="title function_">prepend</span>(span)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parent)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  &lt;div&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;p&gt;ABen 🐾&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;/div&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p><code>append()</code> 在元素的最後一個子節點後插入元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> parent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br><span class="line"></span><br><span class="line">parent.<span class="title function_">append</span>(span)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parent)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  &lt;div&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;p&gt;ABen 🐾&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;/div&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p><code>before()</code> 在節點前插入節點。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">before</span>(span)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parent)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  &lt;div&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;p&gt;ABen 🐾&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;/div&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p><code>after()</code> 在節點後插入節點。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">after</span>(span)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parent)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  &lt;div&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;p&gt;ABen 🐾&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *    &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment"> *  &lt;/div&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><p><code>remove()</code> 將指定元素從 DOM tree 中刪除。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selectors)</span><br><span class="line">element.<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure>

<p>較舊的方法是使用 <code>removeChild()</code> 從父元素中刪除指定的子節點 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selectors)</span><br><span class="line">element.<span class="property">parentElement</span>.<span class="title function_">removeChild</span>(element)</span><br></pre></td></tr></table></figure>

<h1 id="Style、Attribute-與-Class"><a href="#Style、Attribute-與-Class" class="headerlink" title="Style、Attribute 與 Class"></a>Style、Attribute 與 Class</h1><h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>ABen 🐾<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>style()</code> 只能取得以行內樣式(Inline styles)設定的屬性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">style</span>.<span class="property">color</span>) <span class="comment">// red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">style</span>.<span class="property">fontSize</span>) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>getComputedStyle()</code> 可以取得元素的所有樣式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(div).<span class="property">color</span>) <span class="comment">// &quot;rgb(255, 0, 0)&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(div).<span class="property">fontSize</span>) <span class="comment">// &quot;20px&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>setProperty()</code> 設定或修改 CSS 變數 :</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--color-primary</span>: <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--color-primary&quot;</span>, <span class="string">&quot;orangered&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h2><p>存取 HTML 標籤中設定的屬性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;img/aben.jpg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">&quot;ABen&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;img&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">age</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-version-number</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;img&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="property">src</span>) <span class="comment">// (絕對路徑) http://xxxx/img/aben.jpg</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="property">alt</span>) <span class="comment">// ABen</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="property">className</span>) <span class="comment">// img</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存取非標準屬性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="property">age</span>) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="title function_">getAttribute</span>(<span class="string">&quot;age&quot;</span>)) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="title function_">getAttribute</span>(<span class="string">&quot;src&quot;</span>)) <span class="comment">// (相對路徑) img/aben.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存取 data-*</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="property">dataset</span>.<span class="property">versionNumber</span>) <span class="comment">// 1.0</span></span><br></pre></td></tr></table></figure>

<p>當元素直接存取 <code>src</code> 屬性時，取得的會是絕對路徑，若是想要取得相對路徑，則需要使用 <code>getAttribute()</code> 方法。</p>
<p>當存取自定義的 <code>data-*</code> 屬性時，屬姓名必須轉換為 camelCase。</p>
<p>可以使用 <code>setAttribute()</code> 方法新增或更新屬性。</p>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 class</span></span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>, <span class="string">&quot;hidden&quot;</span>) <span class="comment">// &lt;div class=&quot;box active hidden&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除 class</span></span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;active&quot;</span>, <span class="string">&quot;hidden&quot;</span>) <span class="comment">// &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切換 class，有則移除，無則添加</span></span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hidden&quot;</span>) <span class="comment">// &lt;div class=&quot;box hidden&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否包含 class</span></span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;hidden&quot;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">MDN - Document</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - JS Engine and Runtime</title>
    <url>/JavaScript-JS-Engine-and-Runtime/</url>
    <content><![CDATA[<p>JS 引擎中包含 Call Stack 與 Heap，在程式碼進入 Call Stack 之前，會先進行解析與編譯的過程，JavaScript 為即時編譯語言，可以比直譯語言更快的執行程式碼，提升運行速度。</p>
<span id="more"></span>

<h1 id="JS-引擎"><a href="#JS-引擎" class="headerlink" title="JS 引擎"></a>JS 引擎</h1><p>引擎中包含兩個部分 :</p>
<ol>
<li>呼叫堆疊(Call Stack) : 程式的執行區域。</li>
<li>堆積(Heap) : 物件儲存的區域。</li>
</ol>
<p><img src="/JavaScript-JS-Engine-and-Runtime/js_engine.webp" alt="JavaScript 引擎"></p>
<h1 id="直譯-amp-編譯-amp-即時編譯"><a href="#直譯-amp-編譯-amp-即時編譯" class="headerlink" title="直譯 &amp; 編譯 &amp; 即時編譯"></a>直譯 &amp; 編譯 &amp; 即時編譯</h1><p>將程式語言轉換成機器語言的過程。</p>
<p>直譯(Interpretation) : 程式碼一行一行的執行，同時轉換成機器碼。</p>
<p><img src="/JavaScript-JS-Engine-and-Runtime/interpretation.webp" alt="Interpretation"></p>
<p>編譯(Compilation) : 程式碼先編譯成機器碼，建立 protable file，之後隨時執行程式。</p>
<p><img src="/JavaScript-JS-Engine-and-Runtime/compilation.webp" alt="Compilation"></p>
<p>即時編譯(Just-in-time compilation) : 程式碼先編譯成機器碼，之後立刻執行程式。</p>
<p><img src="/JavaScript-JS-Engine-and-Runtime/jit.webp" alt="JIT compilation"></p>
<h1 id="即時編譯過程"><a href="#即時編譯過程" class="headerlink" title="即時編譯過程"></a>即時編譯過程</h1><p><img src="/JavaScript-JS-Engine-and-Runtime/js_engine_process.webp" alt="JS engine process"></p>
<p>JavaScript 的即時編譯過程 :</p>
<ol>
<li>解析(Parsing) : 將程式碼解析成 AST(abstract syntax tree ，抽象語法樹)，並檢查語法錯誤。</li>
<li>編譯(Compilation) : 將 AST 編譯成機器語言。<ul>
<li>為了盡速執行，所以先產生未優化的機器碼。</li>
</ul>
</li>
<li>執行(Execution) : 立即於 call stack 中執行。</li>
<li>優化(Optimization) : 將最初編譯的未優化機器碼進行優化，並重新編譯。</li>
</ol>
<h1 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h1><p>瀏覽器中的 Runtime :</p>
<p><img src="/JavaScript-JS-Engine-and-Runtime/browser_runtime.webp" alt="瀏覽器中的 Runtime"></p>
<p>Node.js 中的 Runtime :</p>
<p><img src="/JavaScript-JS-Engine-and-Runtime/node_runtime.webp" alt="Node.js 中的 Runtime"></p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - script 標籤屬性(async &amp; defer)</title>
    <url>/JavaScript-script-%E6%A8%99%E7%B1%A4%E5%B1%AC%E6%80%A7-async-defer/</url>
    <content><![CDATA[<p>當 JavaScript 的檔案越多，網頁載入的時間越久，為了縮減使用者等待的時間，可以使用<code>&lt;script&gt;</code> 標籤上的 <code>async</code> 或 <code>defer</code> 屬性，讓 script 檔案異步加載，加速網頁載入時間，提升使用者體驗。</p>
<span id="more"></span>

<h1 id="Regular"><a href="#Regular" class="headerlink" title="Regular"></a>Regular</h1><p>沒有加上其他屬性的 <code>&lt;script&gt;</code> 標籤。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根據在 HTML 中所處位置的不同，對程式會有不同的影響。</p>
<p><code>&lt;script&gt;</code> 處於 <code>&lt;head&gt;</code> 中 :</p>
<p>用戶載入頁面，瀏覽器開始解析 HTML，構建 DOM tree，當解析到 <code>&lt;script&gt;</code> 後，停止解析 HTML，而開始載入 <code>&lt;script&gt;</code> 中的檔案， 並執行 JavaScript 程式，最後才繼續解析剩下的 HTML。</p>
<p>這代表 JavaScript 會在 DOM 建構完成之前執行，需要操作 DOM 的程式就會因此無法執行。</p>
<p><code>&lt;script&gt;</code> 處於 <code>&lt;body&gt;</code> 的最後一行 :</p>
<p>瀏覽器解析 HTML 是一行一行向下執行，所以將 <code>&lt;script&gt;</code> 放到 <code>&lt;body&gt;</code> 的最後一行就可以保證瀏覽器已將 HTML 解析完畢，DOM tree 建構完成，如此執行 JavaScript 程式就不會出現問題。</p>
<h1 id="async"><a href="#async" class="headerlink" title="async"></a>async</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>async</code> 屬性表示 <code>script</code> 中的檔案為異步加載，在瀏覽器解析 HTML 時，<code>&lt;script&gt;</code> 中的檔案正異步加載，當載入完成後停止解析 HTML，立即執行 JavaScrip 程式，結束後才繼續解析 HTML。</p>
<p>通常 <code>DOMContentLoaded</code> 事件會在所有 <code>&lt;script&gt;</code> 檔案載入後才觸發，但是當使用 <code>async</code> 屬性時，只要 HTML 解析完畢，該事件就會直接觸發。</p>
<p>使用時機 :</p>
<p>不操作 DOM，且不在意 <code>&lt;script&gt;</code> 檔案執行順序時可以使用。適用於獨立的第三方 script，如 Google Analytics。</p>
<h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>defer</code> 屬性表示將 JavaScript 程式推遲到 HTML 解析完畢後才執行。在瀏覽器解析 HTML 時，<code>&lt;script&gt;</code> 中的檔案正異步加載，當 HTML 解析完成後，才執行 JavaScrip 程式。</p>
<h1 id="三者比較"><a href="#三者比較" class="headerlink" title="三者比較"></a>三者比較</h1><p>不同屬性的執行流程圖 :</p>
<p><img src="/JavaScript-script-%E6%A8%99%E7%B1%A4%E5%B1%AC%E6%80%A7-async-defer/efficient-script-loading.webp" alt="不同屬性的執行流程圖"></p>
<center>( 圖片來源 : The Complete JavaScript Course 2023: From Zero to Expert! )</center>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - 原型繼承(Prototypal Inheritance)與原型鏈(Prototype Chain)</title>
    <url>/JavaScript-%E5%8E%9F%E5%9E%8B%E7%B9%BC%E6%89%BF-Prototypal-Inheritance-%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8F%88-Prototype-Chain/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="物件間的繼承"><a href="#物件間的繼承" class="headerlink" title="物件間的繼承"></a>物件間的繼承</h1><p>在 JavaScript 中的繼承與 OOP 的繼承意義不同，從技術上來說，原型繼承更像是實例將方法委託給其原型，模擬 OOP 子類別繼承父類別方法。</p>
<h2 id="構造函式實現"><a href="#構造函式實現" class="headerlink" title="構造函式實現"></a>構造函式實現</h2><p>使用 <code>Object.create()</code> 指定一構造函式的 <code>prototype</code> 屬性為另一構造函式 <code>prototype</code> 屬性物件的原型，實現兩構造函式間的原型繼承。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Dog</span> = <span class="keyword">function</span> (<span class="params">firstName, birthYear</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">birthYear</span> = birthYear</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calcAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2023</span> - <span class="variable language_">this</span>.<span class="property">birthYear</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Pet</span> = <span class="keyword">function</span> (<span class="params">firstName, birthYear, skill</span>) &#123;</span><br><span class="line">  <span class="comment">// call() 呼叫 Dog 函式</span></span><br><span class="line">  <span class="title class_">Dog</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, firstName, birthYear)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">skill</span> = skill</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Pet</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="title class_">Pet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Pet</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Pet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">introduce</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> and I can <span class="subst">$&#123;<span class="variable language_">this</span>.skill&#125;</span>.`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aben = <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;ABen&quot;</span>, <span class="number">2021</span>, <span class="string">&quot;bark at strangers&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben) <span class="comment">// Pet &#123;firstName: &#x27;ABen&#x27;, birthYear: 2021, skill: &#x27;bark at strangers&#x27;&#125;</span></span><br><span class="line">aben.<span class="title function_">introduce</span>() <span class="comment">// My name is ABen and I can bark at strangers.</span></span><br><span class="line">aben.<span class="title function_">calcAge</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>Object.create()</code> 將 <code>Dog.prototype</code> 屬性物件設為 <code>Pet.prototype</code> 屬性物件的原型，使 <code>Pet</code> 的實例 <code>aben</code> 可以使用 <code>Dog</code> 上的 <code>calcAge()</code> 方法，但因為 <code>Object.create()</code> 不會設置新物件的 <code>constructor</code> 屬性，所以 <code>Pet.prototype.constructor</code> 仍然指向 <code>Dog</code> ，只能以 <code>Pet.prototype.constructor = Pet</code> 校正。</p>
<p>原型鏈示意圖 :</p>
<p><img src="/JavaScript-%E5%8E%9F%E5%9E%8B%E7%B9%BC%E6%89%BF-Prototypal-Inheritance-%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8F%88-Prototype-Chain/constructor-function-prototypal-inheritance.webp" alt="構造函式間的原型鏈圖"></p>
<h2 id="ES6-Classes-實現"><a href="#ES6-Classes-實現" class="headerlink" title="ES6 Classes 實現"></a>ES6 Classes 實現</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">firstName, birthYear</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">birthYear</span> = birthYear</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">calcAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2023</span> - <span class="variable language_">this</span>.<span class="property">birthYear</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pet</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">firstName, birthYear, skill</span>) &#123;</span><br><span class="line">    <span class="comment">// super 負責創建子類別的 this</span></span><br><span class="line">    <span class="variable language_">super</span>(firstName, birthYear)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">skill</span> = skill</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">introduce</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> and I can <span class="subst">$&#123;<span class="variable language_">this</span>.skill&#125;</span>.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> aben = <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;ABen&quot;</span>, <span class="number">2021</span>, <span class="string">&quot;bark at strangers&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben) <span class="comment">// Pet &#123;firstName: &#x27;ABen&#x27;, birthYear: 2021, skill: &#x27;bark at strangers&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">aben.<span class="title function_">calcAge</span>() <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">aben.<span class="title function_">introduce</span>() <span class="comment">// My name is ABen and I can bark at strangers.</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>extends</code> 擴展類別作為子類別的父類，並於子類別的 <code>constructor()</code> 函式中呼叫 <code>super()</code> 方法，相當於自動執行父類別的 <code>constructor()</code> 函式。</p>
<p>若子類別中只有與父類別相同的屬性，沒有新增自己的屬性，就可以不用定義 <code>constructor()</code> 函式，子類別會自動調用父類別的 <code>constructor()</code>。</p>
<h2 id="Object-create-實現"><a href="#Object-create-實現" class="headerlink" title="Object.create( ) 實現"></a>Object.create( ) 實現</h2><p><code>Object.create()</code> 不用在意 <code>prototype</code> 屬性與 <code>constructor()</code>方法，只要創建物件並指定原型，就可以實現物件間的原型繼承。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">DogPrototype</span> = &#123;</span><br><span class="line">  <span class="title function_">init</span>(<span class="params">firstName, birthYear</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">birthYear</span> = birthYear</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">calcAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2023</span> - <span class="variable language_">this</span>.<span class="property">birthYear</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PetPrototype</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">DogPrototype</span>)</span><br><span class="line"><span class="title class_">PetPrototype</span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params">firstName, birthYear, skill</span>) &#123;</span><br><span class="line">  <span class="title class_">DogPrototype</span>.<span class="property">init</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, firstName, birthYear)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">skill</span> = skill</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">PetPrototype</span>.<span class="property">introduce</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> and I can <span class="subst">$&#123;<span class="variable language_">this</span>.skill&#125;</span>.`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aben = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">PetPrototype</span>)</span><br><span class="line">aben.<span class="title function_">init</span>(<span class="string">&quot;ABen&quot;</span>, <span class="number">2021</span>, <span class="string">&quot;bark at strangers&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben) <span class="comment">// &#123;firstName: &#x27;ABen&#x27;, birthYear: 2021, skill: &#x27;bark at strangers&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">aben.<span class="title function_">calcAge</span>() <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">aben.<span class="title function_">introduce</span>() <span class="comment">// My name is ABen and I can bark at strangers.</span></span><br></pre></td></tr></table></figure>

<p>原型鏈示意圖 :</p>
<p><img src="/JavaScript-%E5%8E%9F%E5%9E%8B%E7%B9%BC%E6%89%BF-Prototypal-Inheritance-%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8F%88-Prototype-Chain/object-create-prototypal-inheritance.webp" alt="Object.create() 物件間的原型鏈圖"></p>
<h1 id="原型鏈-Prototype-Chain"><a href="#原型鏈-Prototype-Chain" class="headerlink" title="原型鏈(Prototype Chain)"></a>原型鏈(Prototype Chain)</h1><p>原型鏈圖 :</p>
<p><img src="/JavaScript-%E5%8E%9F%E5%9E%8B%E7%B9%BC%E6%89%BF-Prototypal-Inheritance-%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8F%88-Prototype-Chain/prototype-chain.webp" alt="原型鏈圖"></p>
<p>重點整理 :</p>
<ul>
<li>實例的隱式原型 <code>__proto__</code> 屬性等於構造函式的顯式原型 <code>prototype</code> 屬性。</li>
<li>所有函式的 <code>prototype</code> 屬性默認指向一個空物件，但 <code>Object</code> 除外。</li>
<li>所有函式都是 <code>Function</code> 的實例，包括 <code>Function</code> 本身。</li>
</ul>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
<li><a href="https://maxleebk.com/2020/07/25/prototype/">面試官最愛考的 JS 原型鏈</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - 封裝(Encapsulation)</title>
    <url>/JavaScript-%E5%B0%81%E8%A3%9D-Encapsulation/</url>
    <content><![CDATA[<p>OOP 中的封裝，為類別擁有私有屬性或方法，使外部直接無法存取，必須呼叫特定的方法才可以存取類別內部的狀態，因此可以保護類別內的狀態不受外部引響。</p>
<span id="more"></span>

<h1 id="受保護的屬性與方法"><a href="#受保護的屬性與方法" class="headerlink" title="受保護的屬性與方法"></a>受保護的屬性與方法</h1><p>防止類別之外的程式存取類別內的屬性與方法，在 JS 中通常以 <code>_</code> 為前綴，表示為受保護的屬性或方法，不該從外部被存取。</p>
<p>下面以一個銀行 app 的功能為例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">owner, currency, pin</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">owner</span> = owner</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currency</span> = currency</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pin</span> = pin</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">locale</span> = navigator.<span class="property">language</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Protected property</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_movements</span> = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getMovements</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_movements</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">deposit</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_movements</span>.<span class="title function_">push</span>(amount)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">withdraw</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">deposit</span>(-amount)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Protected method</span></span><br><span class="line">  <span class="title function_">_approveLoan</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">requestLoan</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">_approveLoan</span>(amount)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">deposit</span>(amount)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> acc = <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&quot;ABen&quot;</span>, <span class="string">&quot;TWD&quot;</span>, <span class="number">5428</span>)</span><br><span class="line"></span><br><span class="line">acc.<span class="title function_">deposit</span>(<span class="number">100</span>)</span><br><span class="line">acc.<span class="title function_">withdraw</span>(<span class="number">50</span>)</span><br><span class="line">acc.<span class="title function_">requestLoan</span>(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(acc.<span class="title function_">getMovements</span>()) <span class="comment">// [100, -50, 300]</span></span><br></pre></td></tr></table></figure>

<p>因為在外部不應該直接存取 <code>movements</code> 屬性，所以就將它設為受保護的屬性，並且定義 <code>getMovements()</code> 方法為公開介面(public interface)讓外部藉由呼叫此方法取得 <code>movements</code> 值。</p>
<p>存取受保護屬性的方法可以使用 <code>setter</code> 與 <code>getter</code> 語法，或是使用一般的函式，一般函式更加靈活，且可以接受多個參數，通常將它們以 <code>set</code> 或 <code>get</code> 開頭命名。</p>
<h1 id="私有的類別屬性-Class-field-與方法"><a href="#私有的類別屬性-Class-field-與方法" class="headerlink" title="私有的類別屬性(Class field)與方法"></a>私有的類別屬性(Class field)與方法</h1><p>類別屬性(Class field)為定義於任何函式之外的屬性，會存在於每一個實例中，而不會存在類別本身。</p>
<ul>
<li>公開屬性(Public field) : 定義方式如同定義變數並賦值。</li>
<li>私有屬性(Private field) : 以 <code>#</code> 為前綴開頭，外部無法存取此屬性。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">  <span class="comment">// Public field (instance property)</span></span><br><span class="line">  locale = navigator.<span class="property">language</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Private field</span></span><br><span class="line">  #pin</span><br><span class="line">  #movements = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">owner, currency, pin</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">owner</span> = owner</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currency</span> = currency</span><br><span class="line">    <span class="variable language_">this</span>.#pin = pin</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getMovements</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#movements</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">deposit</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#movements.<span class="title function_">push</span>(amount)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">withdraw</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">deposit</span>(-amount)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Private method</span></span><br><span class="line">  #<span class="title function_">approveLoan</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">requestLoan</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">approveLoan</span>(amount)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">deposit</span>(amount)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> acc = <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&quot;ABen&quot;</span>, <span class="string">&quot;TWD&quot;</span>, <span class="number">5428</span>)</span><br><span class="line"></span><br><span class="line">acc.<span class="title function_">deposit</span>(<span class="number">100</span>)</span><br><span class="line">acc.<span class="title function_">withdraw</span>(<span class="number">50</span>)</span><br><span class="line">acc.<span class="title function_">requestLoan</span>(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(acc.<span class="title function_">getMovements</span>()) <span class="comment">// [100, -50, 300]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(acc.#movements) <span class="comment">// Uncaught SyntaxError: Private field &#x27;#movements&#x27; must be declared in an enclosing class</span></span><br></pre></td></tr></table></figure>

<p>子類別也無法直接存取從父類別的私有屬性，需要使用 <code>getter</code> 或 <code>setter</code> 存取。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubAccount</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Account</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">owner, currency, pin, mainAccount</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(owner, currency, pin)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mainAccount</span> = mainAccount</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">showPin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#pin</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subAcc = <span class="keyword">new</span> <span class="title class_">SubAccount</span>(<span class="string">&quot;ABen&quot;</span>, <span class="string">&quot;TWD&quot;</span>, <span class="number">2845</span>, acc)</span><br><span class="line"></span><br><span class="line">subAcc.<span class="title function_">showPin</span>() <span class="comment">// Uncaught SyntaxError: Private field &#x27;#pin&#x27; must be declared in an enclosing class</span></span><br></pre></td></tr></table></figure>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript - 物件導向(Object-oriented programming，OOP)</title>
    <url>/JavaScript-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-Object-oriented-programming/</url>
    <content><![CDATA[<p>物件導向程式設計(Object-oriented programming，OOP)是一種以物件概念為基礎的程式撰寫方式，使用物件模擬現實生活中的事物。在 JS 中並不存在傳統 OOP 的類別(class)，而是以原型(prototype)實現物件導向。</p>
<span id="more"></span>

<h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>類別(class)可以視為定義物件的藍圖，其中包含事物的狀態(屬性)或行為(方法)。</p>
<p>類別的實例(instance)就是透過類別這張藍圖所創建出來的物件。創建的過程稱為實例化(instantiation)。</p>
<h2 id="基本原則"><a href="#基本原則" class="headerlink" title="基本原則"></a>基本原則</h2><p>設計類別的基本原則 :</p>
<ul>
<li><strong>抽象(Abstraction)</strong> : 忽視其他無關的細節，只專注於所要實施的部分，從而獲得事物的概觀，而非無關的細枝末節。</li>
<li><strong>封裝(Encapsulation)</strong> : 在類別中擁有外部無法存取的私有屬性與方法。某些方法可以被暴露(exposed)作為公開介面(public interface)。<ul>
<li>避免外部程式操作內部狀態(state)。</li>
<li>改變內部程式時不會影響外部。</li>
</ul>
</li>
<li><strong>繼承(Inheritance)</strong> : 使子類別可以存取父類別的屬性與方法，並與父類別形成階層結構。<ul>
<li>可以減少重複的程式碼。</li>
<li>更好的模擬現實事物之間的關係。</li>
</ul>
</li>
<li><strong>多型(Polymorphism)</strong> : 子類別可以覆蓋從父類別繼承而來的方法。</li>
</ul>
<h1 id="OOP-in-JavaScript"><a href="#OOP-in-JavaScript" class="headerlink" title="OOP in JavaScript"></a>OOP in JavaScript</h1><p>JavaScript 中以原型(prototype)表示類別，而每一個物件都連結到原型物件，透過原型繼承(prototypal inheritance)使物件可以存取原型物件中的屬性及方法。</p>
<blockquote>
<p>JS 中原型繼承(prototypal inheritance)與 OOP 中繼承(inheritance)的差別 :</p>
<ul>
<li>原型繼承是物件實例繼承原型物件的屬性及方法，或者也可以說是實例物件將方法委託給原型物件。</li>
<li>繼承是子類別繼承父類別的屬性及方法。</li>
</ul>
</blockquote>
<p>三個實現原型繼承的方法 :</p>
<ul>
<li>構造函式(Constructor function) : 用於創建物件的函式，內建物件如 Array、Set 或 Map 就是以構造函式創建。</li>
<li>ES6 Classes : 構造函式的語法糖。</li>
<li>Object.create() : 連結原型物件最簡單且直接的方法。</li>
</ul>
<h2 id="構造函式-Constructor-function"><a href="#構造函式-Constructor-function" class="headerlink" title="構造函式(Constructor function)"></a>構造函式(Constructor function)</h2><p>構造函式可以使用函式聲明或是函式表達式，但不能使用箭頭函式，因為箭頭函示沒有 <code>this</code> 綁定。</p>
<p>使用 <code>new</code> 執行 :</p>
<ol>
<li>創建一個物件。</li>
<li>呼叫構造函式，<code>this</code> 綁訂為新物件。</li>
<li>新物件連結到原型物件，設置 <code>__proto__</code> 屬性並指向構造函式的 <code>prototype</code> 屬性。</li>
<li>構造函式回傳新物件，此物件即構造函式的實例。</li>
</ol>
<p>在構造函式中使用 <code>this</code> 添加屬性，而方法並不會定義於構造函式中，而是使用 <code>prototype</code> 屬性將方法添加於原型物件上，使用原型繼承的特性。如果將方法定義於構造函式，當創造出多個實例時，那麼每一個實例上都有相同的方法，這對於程式效能會產生很大的影響。</p>
<p>範例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Dog</span> = <span class="keyword">function</span> (<span class="params">firstName, birthYear</span>) &#123;</span><br><span class="line">  <span class="comment">//console.log(this) // Dog &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 實例屬性(Instance properties)</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">birthYear</span> = birthYear</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Dog.prototype 上添加屬性</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">species</span> = <span class="string">&quot;C. familiaris&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Dog.prototype 上添加方法</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calcAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2023</span> - <span class="variable language_">this</span>.<span class="property">birthYear</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// &#123;calcAge: f, constructor: f&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aben = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;ABen&quot;</span>, <span class="number">2021</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben) <span class="comment">// Dog &#123; firstName: &#x27;ABen&#x27;, birthYear: 2021 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog 的實例物件通過原型呼叫 calcAge 函式</span></span><br><span class="line">aben.<span class="title function_">calcAge</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>實例的 <code>__proto__</code> 屬性指向構造函式的 <code>prototype</code> 屬性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> === aben.<span class="property">__proto__</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>可以使用 <code>isPrototypeOf()</code> 方法確認物件的原型，特別注意構造函式的 <code>prototype</code> 屬性並非指向構造函式的原型，而是指向構造函式創建的實例的原型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(aben)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(<span class="title class_">Dog</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>hasOwnProperty()</code> 方法確認屬性是否為實例屬性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;firstName&quot;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;species&quot;</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="靜態方法-static-method"><a href="#靜態方法-static-method" class="headerlink" title="靜態方法(static method)"></a>靜態方法(static method)</h3><p>靜態方法為依附在構造函式上的方法，不是在構造函式 <code>prototype</code> 屬性上的方法，所以只能由構造函示呼叫，而實例物件無法呼叫。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Dog</span> = <span class="keyword">function</span> (<span class="params">firstName, birthYear</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">birthYear</span> = birthYear</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hey 方法存在於 Dog 構造函式中</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property">hey</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hey there 👋&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aben = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Aben&quot;</span>, <span class="number">2021</span>)</span><br><span class="line"></span><br><span class="line">aben.<span class="title function_">hey</span>() <span class="comment">// Uncaught TypeError: aben.hey is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="title function_">hey</span>() <span class="comment">// Hey there 👋</span></span><br></pre></td></tr></table></figure>

<h2 id="ES6-Classes"><a href="#ES6-Classes" class="headerlink" title="ES6 Classes"></a>ES6 Classes</h2><p>JavaScript 中的 <code>class</code> 並不是 OOP 中的類別(class)，它只是構造函式的語法糖，作用與構造函式相同。</p>
<p>語法 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class declaration</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">className</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class expression</span></span><br><span class="line"><span class="keyword">const</span> className = <span class="keyword">class</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>範例 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">firstName, birthYear</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">birthYear</span> = birthYear</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">calcAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2023</span> - <span class="variable language_">this</span>.<span class="property">birthYear</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aben = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Aben&quot;</span>, <span class="number">2021</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben) <span class="comment">// Dog &#123; firstName: &#x27;Aben&#x27;, birthYear: 2021 &#125;</span></span><br><span class="line"></span><br><span class="line">aben.<span class="title function_">calcAge</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><code>constructor()</code> 構造器為 <code>class</code> 中的方法，相當於構造函式。</p>
<p><code>calcAge()</code> 方法會自動添加在 <code>Dog.prototype</code> 中。</p>
<p><code>class</code> 的特性 :</p>
<ul>
<li>不會提升(hoisted)。</li>
<li>為一等公民(first-class citizen)，表示可以做為函式參數，也可以被函式回傳。</li>
<li>在內部執行嚴格模式(strict mode)。</li>
</ul>
<h3 id="靜態方法-static-method-1"><a href="#靜態方法-static-method-1" class="headerlink" title="靜態方法(static method)"></a>靜態方法(static method)</h3><p>在 <code>class</code> 語法中靜態方法以 <code>static</code> 表示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">firstName, birthYear</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">birthYear</span> = birthYear</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 實例方法(instance method)</span></span><br><span class="line">  <span class="title function_">calcAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2023</span> - <span class="variable language_">this</span>.<span class="property">birthYear</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 靜態方法(static method)</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">hey</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hey there 👋&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aben = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Aben&quot;</span>, <span class="number">2021</span>)</span><br><span class="line"></span><br><span class="line">aben.<span class="title function_">hey</span>() <span class="comment">// Uncaught TypeError: aben.hey is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="title function_">hey</span>() <span class="comment">// Hey there 👋</span></span><br></pre></td></tr></table></figure>

<h3 id="Getter-amp-Setter"><a href="#Getter-amp-Setter" class="headerlink" title="Getter &amp; Setter"></a>Getter &amp; Setter</h3><p>在 JS 物件中有兩種屬性，一般的屬性與存取器屬性(accessor property)。getter 與 setter 就屬於存取器屬性，本身其實是存取物件內數據的方法。</p>
<p>兩者差異 :</p>
<ul>
<li>getter : 用於取得物件中對屬性進行計算後得到的數據。</li>
<li>setter : 用於設定物件中的屬性。</li>
</ul>
<p>在一般的物件中使用 <code>get</code> 與 <code>set</code> 分別定義 getter 與 setter，使用時要注意它們是屬性而非方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> account = &#123;</span><br><span class="line">  <span class="attr">owner</span>: <span class="string">&quot;ABen&quot;</span>,</span><br><span class="line">  <span class="attr">movements</span>: [<span class="number">200</span>, <span class="number">100</span>, <span class="number">120</span>],</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">latest</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">movements</span>.<span class="title function_">slice</span>(-<span class="number">1</span>).<span class="title function_">pop</span>()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">latest</span>(<span class="params">mov</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">movements</span>.<span class="title function_">push</span>(mov)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(account.<span class="property">latest</span>) <span class="comment">// 120</span></span><br><span class="line"></span><br><span class="line">account.<span class="property">latest</span> = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(account.<span class="property">movements</span>) <span class="comment">// (4) [200, 100, 120, 50]</span></span><br></pre></td></tr></table></figure>

<p>在 <code>class</code> 中 getter 與 setter 的使用方法與在一般物件中相同，且常用於驗證數據。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">fullName, birthYear</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fullName</span> = fullName</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">birthYear</span> = birthYear</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2023</span> - <span class="variable language_">this</span>.<span class="property">birthYear</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.<span class="title function_">includes</span>(<span class="string">&quot; &quot;</span>)) <span class="variable language_">this</span>.<span class="property">_fullName</span> = name</span><br><span class="line">    <span class="keyword">else</span> <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span> is not a full name!`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">fullName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_fullName</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aben = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Aben Chang&quot;</span>, <span class="number">2021</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben) <span class="comment">// Dog &#123;_fullName: &#x27;Aben Chang&#x27;, birthYear: 2021&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben.<span class="property">age</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben.<span class="property">fullName</span>) <span class="comment">// Aben Chang</span></span><br></pre></td></tr></table></figure>

<p>上面程式中使用 setter 驗證名字是否為全名，當 <code>constructor()</code> 中執行 <code>this.fullName = fullName</code> 時，即執行同名 setter 檢查輸入是否為全名，若是全名則存於 <code>_fullName</code> 屬性。</p>
<h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create( )"></a>Object.create( )</h2><p><code>Object.create()</code> 可以指定原型物件，也就是說將物件的 <code>__proto__</code> 屬性指向任何其他物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Dog</span> = &#123;</span><br><span class="line">  <span class="title function_">init</span>(<span class="params">firstName, birthYear</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">birthYear</span> = birthYear</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">calcAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2023</span> - <span class="variable language_">this</span>.<span class="property">birthYear</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aben = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Dog</span>) <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben.<span class="property">__proto__</span> === <span class="title class_">Dog</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">aben.<span class="title function_">init</span>(<span class="string">&quot;Aben&quot;</span>, <span class="number">2021</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aben) <span class="comment">// &#123;firstName: &#x27;Aben&#x27;, birthYear: 2021&#125;</span></span><br></pre></td></tr></table></figure>

<p>上面程式中 <code>Object.create()</code> 創建一個空物件，並指定 Dog 為其原型物件。通常設定原型屬性的方法是在原型物件中定義一個像是 <code>constructor()</code> 的函式，如程式碼中的 <code>init()</code>，盡量不要使用像是 <code>aben.firstName = &quot;ABen&quot;</code> 直接賦值的方法添加屬性。</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.udemy.com/course/the-complete-javascript-course/">The Complete JavaScript Course 2023: From Zero to Expert!</a></li>
<li><a href="https://en.wikipedia.org/wiki/Abstraction_(computer_science)">Wikipedia - Abstraction (computer science)</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
</search>
